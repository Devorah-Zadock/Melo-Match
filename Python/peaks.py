from scipy import ndimage
import numpy as np


class Peaks():

    def __init__(self):
        pass

    def get_peaks(self, spectrogram, no_of_iteration=10, min_amplitude=10):
        """
        Returns a list of peak frequencies and times from the given spectrogram using the specified minimum amplitude.
        """
        # Define structure and neighborhood
        structure = ndimage.generate_binary_structure(2, 2)
        neighborhood = ndimage.iterate_structure(structure, no_of_iteration)

        # Find local maxima in spectrogram
        local_max = ndimage.maximum_filter(spectrogram, footprint=neighborhood) == spectrogram

        # Define background and eroded background
        background = (spectrogram == 0)
        eroded_background = ndimage.binary_erosion(background, structure=neighborhood, border_value=1)

        # AppLying XOR between matrices to get the booLean mask of spectrogram
        detected_peaks = local_max ^ eroded_background

        # Get the peak values, frequency and time
        peaks = spectrogram[detected_peaks].flatten()
        peak_freqs, peak_times = np.where(detected_peaks)

        # Get indices of peaks that meet the minimum amplitude threshold
        peak_indices = np.where(peaks > min_amplitude)

        # Get frequency and time values for qualified peaks
        freqs = peak_freqs[peak_indices]
        times = peak_times[peak_indices]

        # Return list of peak values, frequency, and time as tuples
        return list(zip(freqs, times))


# peaks = [(1, 19), (1, 48), (1, 100), (17, 78), (19, 65), (20, 51), (34, 35), (35, 77), (39, 55), (52, 10), (58, 38), (59, 60), (61, 95), (70, 5), (73, 97), (76, 61), (86, 14), (86, 92), (87, 1), (92, 72), (103, 101), (104, 12), (104, 28), (104, 86), (115, 101), (116, 38), (127, 6), (134, 40), (138, 4), (139, 18), (139, 60), (152, 96), (153, 73), (154, 58), (155, 17), (155, 35), (171, 34), (171, 74), (173, 57), (174, 9), (187, 88), (189, 74), (190, 56), (191, 32), (202, 9), (205, 50), (209, 70), (209, 95), (216, 23), (225, 41), (225, 76), (232, 0), (236, 42), (244, 84), (248, 23), (254, 52), (260, 100), (270, 54), (273, 88), (274, 34), (275, 74), (283, 16), (283, 48), (293, 59), (293, 71), (296, 10), (297, 26), (315, 17), (315, 29), (328, 58), (329, 81), (345, 47), (345, 95), (347, 58), (356, 20), (368, 50), (373, 29), (379, 96), (385, 29), (385, 81), (387, 51), (399, 0), (409, 50), (421, 81), (428, 51), (430, 30), (439, 95), (442, 53), (444, 81), (448, 17), (450, 29), (458, 95), (470, 50), (474, 17), (484, 80), (489, 29), (491, 50), (499, 96), (503, 28), (504, 17), (512, 45), (519, 17), (523, 80), (525, 30), (531, 49), (537, 29), (541, 80), (552, 49), (555, 30), (563, 99), (569, 31), (570, 81), (575, 45), (578, 19), (579, 58), (587, 98), (594, 29), (596, 81), (597, 57), (602, 45), (624, 29), (624, 45), (633, 17), (634, 81), (637, 29), (641, 45), (647, 9), (649, 30), (662, 80), (665, 30), (675, 54), (677, 81), (686, 30), (687, 17), (696, 45), (699, 30), (699, 96), (703, 80), (708, 16), (713, 45), (716, 30), (717, 81), (720, 17), (721, 97), (730, 81), (736, 97), (737, 45), (741, 74), (746, 30), (753, 75), (754, 60), (757, 45), (769, 57), (769, 77), (771, 45), (781, 30), (802, 16), (806, 45), (821, 81), (827, 19), (827, 44), (840, 45), (850, 29), (850, 81), (871, 67), (873, 44), (877, 81), (885, 44), (888, 89), (903, 19), (904, 44), (933, 44), (968, 19), (968, 80), (980, 45), (981, 81), (981, 98), (987, 19), (994, 44), (999, 80), (1004, 17), (1011, 45), (1017, 81), (1032, 45), (1034, 19), (1043, 96), (1044, 45), (1046, 57), (1046, 77), (1050, 19), (1060, 96), (1061, 44), (1062, 19), (1066, 76), (1075, 96), (1077, 19), (1077, 75), (1084, 44), (1087, 32), (1089, 74), (1097, 19), (1098, 94), (1099, 44), (1115, 17), (1137, 101), (1138, 19), (1146, 89), (1160, 44), (1162, 19), (1175, 76), (1177, 90), (1178, 19), (1189, 89), (1191, 44), (1197, 19), (1197, 64), (1202, 89), (1209, 76), (1215, 44), (1215, 64), (1221, 17), (1223, 78), (1232, 90), (1242, 76), (1243, 44), (1254, 39), (1260, 17), (1265, 75), (1272, 88), (1278, 75), (1279, 41), (1285, 98), (1289, 17), (1292, 56), (1295, 44), (1303, 81), (1304, 18), (1316, 44), (1317, 98), (1319, 1), (1326, 77), (1327, 44), (1330, 98), (1340, 32), (1343, 89), (1345, 44), (1350, 101), (1355, 18), (1357, 32), (1357, 44), (1368, 75), (1385, 75), (1387, 56), (1388, 20), (1390, 32), (1391, 44), (1404, 44), (1406, 56), (1407, 32), (1414, 18), (1419, 75), (1421, 40), (1422, 29), (1427, 100), (1439, 37), (1439, 100), (1447, 75), (1459, 18), (1527, 29)]
# import matplotlib.pyplot as plt
# x = [i[0] for i in peaks]
# y = [i[1] for i in peaks]
# x = x[:20]
# y = y[:20]
# plt.plot(x, y, x, y, 'ro', 15)
# plt.show()
